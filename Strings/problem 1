https://www.naukri.com/code360/problems/check-if-one-string-is-a-rotation-of-another-string_1115683?leftPanelTabValue=PROBLEM


 Check If One String Is A Rotation Of Another String

#include <bits/stdc++.h>
int isCyclicRotation(string &p, string &q) {

    p = p+p;
     int i=0;
     int j=0;
      while(i<p.length()){
         if(p.at(i) == q.at(j)){ 
              i++;
              j++;
              if(j==q.length())
                  return 1;
          }
          else if( j!=0)
              j=0;
          else
              i++;
      }
      return 0;


// // METHOD 1 TLE
//   p = p + p;
//   bool flag = 1;


//   for(int i = p.length() - 1; i>= 0; i--) {

//     // METHOD 1.1
//     flag = 1;
//     int k =i;
//     for (int j = 0; j < q.length(); j++) {

//       if (p[k] != q[j]) {
//         flag = 0;
//         break;
//       }
//       k++;
//     }

//     if (flag) {
//       return 1;
//     }
//   }
//   return 0;

  //    // METHOD 1.2

  //     // string temp = r.substr(i , q.length()) ;

  //     // if(temp == q){
  //     //     return 1;
  //     // }

  // }
  // return 0;



  // METHOD 2   TLE
  // bool flag = 1;
  // string r = p + p;

  // unordered_map<string,int> mp;
  // for(int i = p.length() - 1; i >= 0; i--){
  //     mp[r.substr(i , q.length())] = 0;
  // }

  // if(mp.find(q) != mp.end()){
  //     return 1;
  // }

  // return 0;

  // METHOD 3    TLE
  //  queue<char> q1;
  //  queue<char> q2;

  // for(int i =0; i < p.length(); i++){
  //     q1.push(p[i]);
  //     q2.push(q[i]);
  // }

  // for(int i =0; i < p.length(); i++){
  //     if(q1 == q2){
  //         return 1;
  //     }

  //     char front_q1 = q1.front();
  //     q1.pop();
  //     q1.push(front_q1);
  // }

  // return 0;

  // METHOD 4 TLE
  //    return p.size() == q.size() && (p + p).find(q) != string::npos;

}
